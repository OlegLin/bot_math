import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import random
import math

import config

TOKEN = config.tokenFiski  # –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

PI = 3.14
users = {}  # {user_id: {'correct': 0, 'incorrect': 0, 'name': '–ò–º—è'} }
admins = set()  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
SECRET_CODE = "404.498"


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=["start"])
def start_command(message):
    user_id = message.chat.id
    if user_id not in users:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        bot.register_next_step_handler(message, register_user)
    else:
        show_main_menu(user_id)
def register_user(message):
    user_id = message.chat.id
    users[user_id] = {'correct': 0, 'incorrect': 0, 'name': message.text}
    bot.send_message(user_id, "–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    notify_admins(user_id)
    show_main_menu(user_id)


def notify_admins(user_id):
    user_data = users[user_id]
    for admin_id in admins:
        bot.send_message(admin_id, f"üì¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n–ò–º—è: {user_data['name']}\n"
                                   f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {user_data['correct']}\n"
                                   f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {user_data['incorrect']}")


def show_main_menu(user_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


# –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(content_types=["text"])
def handle_text(message):
    user_id = message.chat.id
    text = message.text

    if text == SECRET_CODE:
        admins.add(user_id)
        bot.send_message(user_id, "‚úÖ –¢–µ–ø–µ—Ä—å —Ç—ã –∞–¥–º–∏–Ω! –í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        send_all_users_stats(user_id)
        return

    if text == "–ê–ª–≥–µ–±—Ä–∞":
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å", "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω—è", "–°–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π", "–ù–∞–∑–∞–¥")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=markup)

    elif text == "–ì–µ–æ–º–µ—Ç—Ä–∏—è":
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è", "–ù–∞–∑–∞–¥")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=markup)

    elif text == "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ù–∞–∑–∞–¥")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=markup)

    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics(user_id)

    elif text == "–ù–∞–∑–∞–¥":
        show_main_menu(user_id)

    else:
        send_task(user_id, text)


def send_task(user_id, topic):
    if topic == "–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å":
        base = random.randint(2, 10)
        question = f"–í—ã—á–∏—Å–ª–∏: {base}¬≤"
        answer = str(base ** 2)
    elif topic == "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω—è":
        base = random.randint(2, 10)
        question = f"–ù–∞–π–¥–∏ –∫–æ—Ä–µ–Ω—å: ‚àö{base ** 2}"
        answer = str(base)
    elif topic == "–°–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π":
        x, y = random.randint(-5, 5), random.randint(-5, 5)
        a, b = random.randint(1, 5), random.randint(1, 5)
        c = a * x + b * y
        d, e = random.randint(1, 5), random.randint(1, 5)
        f = d * x + e * y
        question = f"–†–µ—à–∏ —Å–∏—Å—Ç–µ–º—É:\n{a}x + {b}y = {c}\n{d}x + {e}y = {f}"
        answer = f"({x}; {y})"
    elif topic == "–ì–µ–æ–º–µ—Ç—Ä–∏—è":
        r = random.randint(5, 15)
        question = f"–ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º {r} (œÄ‚âà3.14)."
        answer = str(round(PI * r ** 2, 2))
    elif topic == "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è":
        angle = random.choice([0, 30, 45, 60, 90, 180])
        question = f"–ß–µ–º—É —Ä–∞–≤–Ω–æ sin({angle})?"
        answer = str(round(math.sin(math.radians(angle)), 3))
    elif topic == "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å":
        total = random.randint(20, 50)
        favorable = random.randint(1, total)
        question = f"–í —É—Ä–Ω–µ {total} —à–∞—Ä–æ–≤, {favorable} –±–µ–ª—ã—Ö. –ö–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—Ç–∞—â–∏—Ç—å –±–µ–ª—ã–π?"
        answer = str(round(favorable / total, 3))
    elif topic == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        numbers = [random.randint(1, 100) for _ in range(5)]
        question = f"–ù–∞–π–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ: {', '.join(map(str, numbers))}"
        answer = str(round(sum(numbers) / len(numbers), 3))
    else:
        bot.send_message(user_id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    msg = bot.send_message(user_id, question)
    bot.register_next_step_handler(msg, check_answer, answer)


def check_answer(message, answer):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    user_id = message.chat.id
    user_input = message.text.strip().replace(",", ".")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in users:
        users[user_id] = {'correct': 0, 'incorrect': 0, 'name': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}'}

    if user_input == answer:
        users[user_id]['correct'] += 1
        bot.send_message(user_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
    else:
        users[user_id]['incorrect'] += 1
        bot.send_message(user_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}.")

    show_main_menu(user_id)

def show_statistics(user_id):
    """ –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    stats = users.get(user_id, {'correct': 0, 'incorrect': 0})
    bot.send_message(user_id, f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {stats['correct']}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {stats['incorrect']}")


def send_all_users_stats(admin_id):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π """
    if not users:
        bot.send_message(admin_id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user_id, data in users.items():
        stats_message += f"üë§ {data['name']} - ‚úÖ {data['correct']} | ‚ùå {data['incorrect']}\n"

    bot.send_message(admin_id, stats_message)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)